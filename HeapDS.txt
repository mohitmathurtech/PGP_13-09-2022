Heap Data Structure
A heap is a special tree based structure in which the tree is a complete binary tree.

Operations possible in a Heap Data Structure.
1. Heapify - process of creating a heap from a given array
2. Insertion - process of inserting an element in a heap [Time complexity :-  O(logn)]
3. Deletion - O(logn)
	Deleting the top element of the heap or the highest priority element, and then organizing the heap and returning the element with time complexity O(log N).

Generally, Heaps can be of two types:

Max-Heap: In a Max-Heap the key present at the root node must be greatest among the keys present at all of it’s children. The same property must be recursively true for all sub-trees in that Binary Tree.mum among the keys present at all of it’s children. The same property must be recursively true for all sub-trees in that Binary Tree.
Min-Heap: In a Min-Heap the key present at the root node must be mini

Advantages of Heap Data Structure:

Less time complexity, for inserting or deleting an element in the heap the time complexity is just O(log N).
It helps to find the minimum number and greatest number.
To just peek at the most prior element the time complexity is constant O(1).

Disadvantages of Heap Data Structure:

The time complexity for searching an element in Heap is O(N).
[7,9,3,4,16,90 ]

void insertIntoHeap(int arr[],  int n, int newValue){
	n = n+1;
	arr[n] = newValue;

	int i = n;
	while( i > 1){
		int parent = i/2;
		if(arr[parent] < arr[i]){
			swap(arr, parent, i);
			i = parent;
		} else {
			return;
		}
	}
}

void deleteElement(int arr[], int n){
	arr[1] = arr[n]; // Replacing the root with rightmost child
	n = n-1;
	i =1; //root
	while(i < n){
		int left = arr[2 * i];
		int right = arr[2 * i + 1];
		int largestIndex = left > right ? 2 * i : 2 * i + 1;
		if(arr[i] < arr[largestIndex]){
			swap(arr, i, largestIndex);
			i = largestIndex;
		} else {
			return;
		}
	}
}
------------------------------------------------------------------
heapify
---------------------------------------
10 -> 30 -> 50 -> 20 -> 35 -> 15
---------------------------------------

//For Max-Heap
void heapify(int arr[], int n, int i){
	int largest = i;
	int left = 2 * i;
	int right = 2 * i +1;
	
	if(left <= n && arr[left] > arr[largest]){
		largest = left; 
	} 
	if(right <= n && arr[right] > arr[largest]){
		largest = right; 
	}
	
	if(largest != i) {
		swap(arr, i, largest);
		heapify(arr, n, largest);
	} 
}
---------------------------------------
Building the heap using heapify from an array.

buildHeap(int arr[], int n){	
	for(int i = n/2; i> 0; i--){
		heapify(a, n, i);
	}
}
10 -> 30 -> 50 -> 20 -> 35 -> 15
---------------------------------------
Heap Sort!

void heapSort(int a[], int n){
	for(int i =n; i>1; i--){
		swap(a, 1, i); //Swap root, last element in the CBT heap
		heapify(a,i-1, 1);
	}
}

swap(arr, 1, 6); 
heapify(arr,5, 1);
void heapify(int arr[], int n, int i){

swap(arr, 1, 6); 
heapify(arr,4, 1);

swap(arr, 1, 4); 
heapify(arr,3, 1);

swap(arr, 1, 3); 
heapify(arr,2, 1);

swap(arr, 1, 2); 
heapify(arr,1, 1);
------------------------------------------------------------------
Priority Queue
----------------
Every item has a priority associated with it.
An element with high priority is dequeued before an element with low priority. 
If two elements have the same priority, they are served according to their order in the queue.

 

------------------------------------------------------------------
K’th Smallest/Largest Element in Unsorted Array

Given an array and a number K where K is smaller than the size of the array. Find the K’th smallest element in the given array. Given that all array elements are distinct.

Input: arr[] = {7, 10, 4, 3, 20, 15}, K = 3 
Output: 7

Input: arr[] = {7, 10, 4, 3, 20, 15}, K = 4 
Output: 10 

------------------------------------------------------------------
What is Median?
Median can be defined as the element in the data set which separates the higher half of the data sample from the lower half. In other words, we can get the median element as, when the input size is odd, we take the middle element of sorted data. If the input size is even, we pick an average of middle two elements in the sorted stream.


Given that integers are being read from a data stream. Find the median of all the elements read so far starting from the first integer till the last integer.
Find Median of Running stream of Integers 

1, 5, 6, 1, 3, 6, 1, 4,1, 2,4 ,5 ,7, 6, 9...................


1. Sorting is required.. ? -> Yes
2. Data structure...? -> 




















