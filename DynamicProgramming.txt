Dynamic Programming
--------------------------

1. Overlapping subproblems
	When the solutions to the same subproblems are needed repetitively for solving the actual problem. The problem is said to have overlapping subproblems property.

2. Optimal Substructure Property:
	If the optimal solution of the given problem can be obtained by using optimal solutions of its subproblems then the problem is said to have Optimal Substructure Property.

	Fibonacci Series :-
		-> Using memoization
			Time Complexity -> O(n)
			Space Complexity ->
				O(n)(Recursion Stack)  + O(n) -> array/map => O(n) + O(n) = O(n)

		-> Using Tabulation
			Time Complexity -> O(n)
			Space Complexity -> O(1)



Revision :-
	Largest Sum Contiguous Subarray (Kadane’s Algorithm)
		Given an array arr[] of size N. The task is to find the sum of the contiguous subarray within a arr[] with the largest sum.
		Input :- {-2, -3, 4, -1, -2, 1, 5, -3}

	Algorithm :-
		currentMax = MIN_VALUE;
		interMax = 0; //Out intermediate max should never become negative

		for i -> 0 to n;
			interMax = interMax+ arr[i];

			if(currentMax < interMax) // Check for maximum value here
				currentMax = interMax;

			if(interMax < 0) //ignore negative value;
				interMax = 0;

Find maximum possible stolen value from houses
	There are N houses built in a line, each of which contains some value in it. A thief is going to steal the maximal value of these houses, but he can’t steal in two adjacent houses because the owner of the stolen houses will tell his two neighbors left and right sides. The task is to find what is the maximum stolen value.

	int houseValue[] = {6, 7, 1, 3, 8, 2, 4}
	Output :- 19

	Algorithm:- Recursion
												{6, 7, 1, 3, 8, 2, 4}   	6
		maximumStolenValue -> houseValue[] and noOfHouse

		//case 1:- No houses
		if(n < 0)
			return 0;
		//Case 2: Only one house
		if n == 0
			return houseValue[n];

		int firstPick = houseValue[n] + maximumStolenValue(houseValue, n-2)
		int nextPick = maximumStolenValue(houseValue, n-1)

		int maximumStolenValue = Math.max(firstPick, nextPick);
		return maximumStolenValue;

Knapsack :-
	Knapsack variations
		0/1 knapsack
		fractional knapsack -> greedy approach
		Unbounded knapsack

	Longest Common Subsequence
	Matrix Multiplication

Assignment :-

	A thief needs to rob money in a street. The houses in the street are arranged in a circular manner. Therefore the first and the last house are adjacent to each other. The security system in the street is such that if adjacent houses are robbed, the police will get notified.

	input :- [2, 1, 4, 9]
	output - 10 -> 9+1

	input :- [1, 5, 2, 1, 6]
	output - 11 -> 5+ 6

Knapsack :-
	Knapsack variations
		0/1 knapsack
		Unbounded knapsack
		fractional knapsack -> greedy approach

0/1 knapsack Problems :-
-----------------------------
1. Subset sum problem
2. Equal sum partition
3. Count of subset sum
4. Minimum subset sum diff
5. Target sum
6 Number of subset with given difference.

1. Given a set of non-negative integers, and a value sum, determine if there is a subset of the given set with sum equal to given sum.
	Input: set[] = {3, 34, 4, 12, 5, 2}, sum = 9
	Output: True
	There is a subset (4, 5) with sum 9.
	Input: set[] = {3, 34, 4, 12, 5, 2}, sum = 30
	Output: False
	There is no subset that add up to 30.

2. Given an array arr[] of length N and an integer X, the task is to find the number of subsets with a sum equal to X.
	Input: arr[] = {1, 2, 3, 3}, X = 6
	Output: 3
	All the possible subsets are {1, 2, 3},
	{1, 2, 3} and {3, 3}

	Input: arr[] = {1, 1, 1, 1}, X = 1
	Output: 4

Unbounded Knapsack Problems :-
-----------------------------
1. Rod cutting
2. Coin change I
3. Coin change II
4.  Maximum ribbon cut

Unbounded Knapsack
------------------------- 

	Coin change I
	Given an integer array of coins[ ] of size N representing different types of currency and an integer sum, The task is to find the number of ways to make sum by using different combinations from coins[].
		Input: sum = 4, coins[] = {1,2,3}, 
		
		Output: 4
		Explanation: there are four solutions: {1, 1, 1, 1}, {1, 1, 2}, {2, 2}, {1, 3}.

		Input: sum = 10, coins[] = {2, 5, 3, 6}
		Output: 5
		Explanation: There are five solutions:
		{2,2,2,2,2}, {2,2,3,3}, {2,2,6}, {2,3,5} and {5,5}. 
		
Longest Common Subsequence
----------------------------------
Variations :- 
1. Largest Common Substring
2. Print LCS
3. Shortest Common Supersequecne
4. Print SCS
5. Minimum no of insertions and deletion to get a -> b ex:- "heap" -> "pea" (In Class)
6. Subsequence pattern matching 
7. Count how many times str1 appears as subsequence in str2
8. Length of largest subsequence of str1 which is substringof str2
9. Longest repeating subsequence (In Class)
10. Largest palindromic subsequence
11. longest palindrome substring
12. count of palindromic substring
13. Minimum no of deletion in a substring to make it a palindrome.
14. Minimum no of insertions in a substring to make its a palindrome. (In Class)

LCS Problem Statement: Given two sequences, find the length of longest subsequence present in both of them. 
A subsequence is a sequence that appears in the same relative order, but not necessarily contiguous. For example, “abc”, “abg”, “bdf”, “aeg”, ‘”acefg”, .. etc are subsequences of “abcdefg”. 


abcraga
abragdc

-> Longest contiguous sub-string -> ab, rag => rag


str1 -> ABCDGH
str2 -> AEDFHR
	-> ADH
	
String 1:-  ABCAB
String 2 :- AECB
Answer :- ACB -> 3

static int longestCommonSubSequence(char[] x, char[] y, int m, int n) {
        //Base case -> LCS -> if one of the string is empty means, 0
        if (m == 0 || n == 0)
            return 0;
        //index comparision
        if (x[m - 1] == y[n - 1]) {
            //System.out.println(x[m - 1]);
            return 1 + longestCommonSubSequence(x, y, m - 1, n - 1);
        } else {
            //Considering one string's one character, check for all the characters on the other string.
            int first = longestCommonSubSequence(x, y, m, n - 1);
            int second = longestCommonSubSequence(x, y, m - 1, n);
            return Math.max(first, second);
        }
    }

	static int lcsTab(char[] x, char[] y, int m, int n) { 
        if (m == 0 || n == 0)
            return 0;
       
	   int dp[][] = new int [m+1][n+1];
	   for(int i= 1; i<=m; i++){
			for(int j=1; j<=n; j++){
				if (x[i - 1] == y[j - 1]) {
					dp[i][j] = 1 + dp[i-1][j-1];
				} else {
					int pick = dp[i][j-1];
					int notPick = dp[i-1][j];
					dp[i][j] = Math.max(pick, notPick);
				}
			}
	   }  
	   return dp[m][n];
    }
	
Minimum number of deletions and insertions to transform one string into another :- 
Given two strings ‘str1’ and ‘str2’ of size m and n respectively. The task is to remove/delete and insert the minimum number of characters from/in str1 to transform it into str2. It could be possible that the same character needs to be removed/deleted from one point of str1 and inserted to some another point.

Input : 
str1 = "heap", str2 = "pea" 

Output : 
Minimum Deletion = 2 and
Minimum Insertion = 1 


LCS -> "heap",  "pea"  -> ea -> 2

	math.abs("heap" - "ea") = 2 -> Deletions
	math.abs("pea" - "ea") = 1 -> Insertions
	
	
Example :- s1 -> "hefap"
				s2 -> "pea"
				lcs -> ea -> 2
			Insertion :- 5 - 2 = 3
			Deletion :- 3 - 2 = 1

Assignment :- Take any of recursion/tabulation/memoization -> do the necessary changes.

Longest Repeating Subsequence
Given a string, find the length of the longest repeating subsequence, such that the two subsequences don’t have same string character at the same position, i.e. any ith character in the two subsequences shouldn’t have the same index in the original string. 

Input: str = "abc"
Output: 0
There is no repeating subsequence

Input: str = "aab"
Output: 1

Input: str = "aabebcdd" -> abd 
Output: 3 

Input: str = "aabb" -> ab 
Output: 2 

Input: str = "axxxy" ->  
Output: 2

Minimum insertions to form a palindrome
Given string str, the task is to find the minimum number of characters to be inserted to convert it to a palindrome.

ab -> aba -> 1
abcd -> abcdcba -> 3
mada -> madam -> 1
gad -> gadag -> 2


Word Break Problem
Given an input string and a dictionary of words, find out if the input string can be segmented into a space-separated sequence of dictionary words. See following examples for more details. 
dictionary 
{ i, like, sam, sung, samsung, mobile, ice,  cream, icecream, man, go, mango}
  
  
Input:  ilike
Output: Yes 
The string can be segmented as "i like".

Input:  ilikesamsung
Output: Yes
The string can be segmented as "i like samsung" or "i like sam sung".


